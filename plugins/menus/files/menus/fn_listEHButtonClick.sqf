/* ----------------------------------------------------------------------------
Function: menus_fnc_listEHButtonClick

Description:
	Button Click eventhandler function for dropList

Parameters:
0:	_buttonCtrl		- Control the EH fired on
Returns:
	nothing
Examples:
	_buttonCtrl ctrlSetEventHandler ["buttonClick",{call menus_fnc_listEHButtonClick}];

Author:
	nigel
---------------------------------------------------------------------------- */
#include "script_component.cpp"
// code begins

// Allow to save displays and controls as variables
disableSerialization;

params ['_buttonCtrl'];

// Get info from button
(_buttonCtrl getVariable 'param_info') params ['_text','_listCode','_selectCode','_sort','_display','_controlGroup'];
(ctrlPosition _buttonCtrl) params ['_x','_y','_w','_h'];

//_buttonCtrl ctrlShow false;

// create the list
if (isNil "_display") then {
	_display = (findDisplay 304000);
};
if (_display isEqualTo displayNull) exitWith {};
if (isNil "_controlGroup") then {
	_controlGroup = _display displayCtrl 4110;
};

private _ctrlList = _display ctrlcreate ['menus_template_listBox',-1,_controlGroup];

// Add info to the list
_ctrlList setVariable ['list_info',[_buttonCtrl,_selectCode]];

// Run the list creation code
private _list = call _listCode;

// Check if list has anything in it
if (_list isEqualTo []) then {

	// Add empty list item
	private _index = _ctrlList lbAdd "Empty";
	_ctrlList lbSetTooltip [_index, "This list is empty"];
} else {

	// Add every element generated by the list
	private _nul = {
		_x params ['_name','_value','_toolTip'];
		if (isNil "_toolTip") then {
			_toolTip = _name;
		};
		private _index = _ctrlList lbAdd _name;
		_ctrlList lbSetData [_index,(str _value)];
		_ctrlList lbSetTooltip [_index, _toolTip];
	} count _list;

	// add list changed EH
	_ctrlList ctrlSetEventHandler ["LBSelChanged","call menus_fnc_listEHLBSelChanged"];
};

// Sort the list
if (_sort) then {
	lbSort _ctrlList;
};

// Move the list into position
_ctrlList ctrlSetPosition [(_x), (_y),(_w),(0)];
_ctrlList ctrlCommit 0;

// Change the size based on the amount of elements
private _hMod = (((lbSize _ctrlList)min 10)*0.85)max 1;

// Smooth dropdown animation
_ctrlList ctrlSetPosition [(_x), (_y),(_w),(_h * _hMod)];
_ctrlList ctrlCommit 0.15;

// Set the focus on the list, so we have it active
ctrlSetFocus _ctrlList;

// Add eventhandlers to the list
_ctrlList ctrlSetEventHandler ["mouseMoving","call menus_fnc_listEHmouseMoving"];